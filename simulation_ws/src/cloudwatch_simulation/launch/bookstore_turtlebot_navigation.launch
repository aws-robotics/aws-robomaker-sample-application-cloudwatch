<launch>
  <!-- 
        A bookstore with a Turtlebot navigating to pre-determined 
        goals in a random order endlessly.

        Note that navigation nodes are in the simulation application 
        as it uses a virtual map and should not be deployed to 
        the real robot. 

        Requires environment variable TURTLEBOT3_MODEL to be set to "waffle_pi"

        Only Turtlebot Waffle Pi is currently supported. SLAM maps for 
        Burger and Waffle need to be generated.
  -->

  <!-- If true, will follow a pre-defined route forever [DEFAULT] -->
  <arg name="follow_route" default="true"/>

  <!-- If true and "follow_route" is false, will follow a dynamic route forever -->
  <arg name="dynamic_route" default="false"/>

  <!-- 
       Always set GUI to false for AWS RoboMaker Simulation
       Use gui:=true on roslaunch command-line to run with a gui.
  -->
  <arg name="gui" default="false"/>

  <!-- World and Robot -->
  <!-- Turtlebot robot model -->  
  <arg name="model" default="$(optenv TURTLEBOT3_MODEL waffle_pi)" doc="model type [burger, waffle, waffle_pi]"/>
  <!-- 
      Only allow users to set (x,y,yaw), otherwise initial 
      2D pose estimates will be wrong 
  -->
  <arg name="x_pos" default="-3.5"/>
  <arg name="y_pos" default="5.5"/>
  <arg name="yaw" default="0.0"/>

  <!-- Floor is not at 0.0 currently -->
  <arg name="z_pos" value="0.30"/>

  <!-- Load the bookstore world into Gazebo -->
  <include file="$(find aws_robomaker_bookstore_world)/launch/bookstore.launch">
    <arg name="gui" value="$(arg gui)"/>
  </include>

  <!-- Spawn the robot into Gazebo with the turtlebot description -->
  <include file="$(find turtlebot3_description_reduced_mesh)/launch/spawn_turtlebot.launch">
    <arg name="x_pos" value="$(arg x_pos)"/>
    <arg name="y_pos" value="$(arg y_pos)"/>
    <arg name="z_pos" value="$(arg z_pos)"/>
    <arg name="yaw"   value="$(arg yaw)"/>
  </include>

  <!-- Enable navigation system -->
  <include file="$(find cloudwatch_simulation)/launch/turtlebot3_navigation.launch">
    <arg name="map_file" value="$(find aws_robomaker_bookstore_world)/maps/turtlebot3_$(arg model)/map.yaml"/>
    <!-- Initial pose must match the starting position of the robot for an aligned map -->
    <arg name="initial_pose_x" value="$(arg x_pos)"/>
    <arg name="initial_pose_y" default="$(arg y_pos)"/>
    <arg name="initial_pose_a" default="$(arg yaw)"/>
    <arg name="open_rviz" value="false"/>
  </include>

  <!-- Send navigation route goals to the robot in random order -->
  <group if="$(arg follow_route)">
    <node pkg="aws_robomaker_simulation_common" type="route_manager" name="route_manager" output="screen">
      <rosparam file="$(find aws_robomaker_bookstore_world)/routes/route.yaml" command="load"/> 
    </node>
  </group>

  <!-- Send dynamically generated navigation route goals to the robot -->
  <group if="$(arg dynamic_route)">
    <node pkg="aws_robomaker_simulation_common" type="route_manager" name="route_manager" output="screen">
       <param name="~mode"  type="str" value="dynamic"/>  
    </node>
  </group>

</launch>
