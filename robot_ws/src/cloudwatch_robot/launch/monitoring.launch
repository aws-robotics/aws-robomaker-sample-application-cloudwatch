<launch>
  <!-- 
        Include this file to enable CloudWatch monitoring of operational and health metrics. 
        Your robot will report metrics to CloudWatch Metrics and logs to CloudWatch Logs.
   
        See rotate.launch for example <include> usage. 
  -->

  <!-- Optional AWS region, if empty uses the config defaults -->
  <arg name="aws_region" value="$(optenv ROS_AWS_REGION)" doc="AWS region override, defaults to config .yaml if unset"/>

  <!-- Optional launch ID, if specified, used for suffixing resource names -->
  <arg name="launch_id" value="$(optenv LAUNCH_ID)" doc="Used for resource name suffix if specified"/>
  
  <!-- Report speed metrics to CloudWatch -->
  <node pkg="cloudwatch_robot" type="monitor_speed" name="monitor_speed" output="log"/>

  <!-- Report distance to nearest obstacle metric to CloudWatch -->
  <node pkg="cloudwatch_robot" type="monitor_obstacle_distance" name="monitor_obstacle_distance" output="log"/>

  <!-- Report distance to goal metric to CloudWatch (does nothing if there isn't a planned goal) -->
  <node pkg="cloudwatch_robot" type="monitor_distance_to_goal" name="monitor_distance_to_goal" output="log"/>

  <!-- Report health Metrics -->
  <include file="$(find health_metric_collector)/launch/health_metric_collector.launch" >
    <arg name="config_file" value="$(find cloudwatch_robot)/config/health_metrics_config.yaml" />
  </include>

  <!-- Enable CloudWatch Metrics reporting -->
  <arg name="metrics_node_name" value="cloudwatch_metrics_collector"/>
  <arg name="aws_metrics_namespace" default="robomaker_cloudwatch_monitoring_example"/>
  <include file="$(find cloudwatch_metrics_collector)/launch/cloudwatch_metrics_collector.launch" >
    <arg name="output" value="screen"/>
    <arg name="node_name" value="$(arg metrics_node_name)"/>
    <arg name="config_file" value="$(find cloudwatch_robot)/config/cloudwatch_metrics_config.yaml"/>
  </include>
  <rosparam if="$(eval aws_region != '')" param="/$(arg metrics_node_name)/aws_client_configuration/region" subst_value="true">$(arg aws_region)</rosparam>
  <rosparam if="$(eval launch_id != '')" param="/$(arg metrics_node_name)/aws_metrics_namespace" subst_value="true">$(arg aws_metrics_namespace)-$(arg launch_id)</rosparam>

  <!-- Enable CloudWatch logging, send /rosout to CW Logs -->
  <arg name="logger_node_name" value="cloudwatch_logger"/>
  <arg name="log_group_name" default="robomaker_cloudwatch_monitoring_example" />
  <include file="$(find cloudwatch_logger)/launch/cloudwatch_logger.launch">
    <arg name="output" value="screen"/>
    <arg name="node_name" value="$(arg logger_node_name)"/>
    <arg name="config_file" value="$(find cloudwatch_robot)/config/cloudwatch_logs_config.yaml" />
  </include>
  <rosparam if="$(eval aws_region != '')" param="/$(arg logger_node_name)/aws_client_configuration/region" subst_value="true">$(arg aws_region)</rosparam>
  <rosparam if="$(eval launch_id != '')" param="/$(arg logger_node_name)/log_group_name" subst_value="true">$(arg log_group_name)-$(arg launch_id)</rosparam>
</launch>
